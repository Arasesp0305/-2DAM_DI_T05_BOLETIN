#  Insertar codigo fuente y APIs en sphinx

## Representar códgio fuente

### Representar código de forma general
Si queremos documentar un trozo de código sin resaltar ninguna sintaxis específica del lenguaje utilizado podemos hacerlo de la siguiente forma:
```bash
```bash
# Ejemplo de código en Python
def saludar(nombre):
    return f"Hola, {nombre}!"
    ```
```
Este ejemplo quedaría representado de esta forma:
```bash
# Ejemplo de código en Python
def saludar(nombre):
    return f"Hola, {nombre}!"
```

### Representar código con una sintaxis específica
Si queremos documentar un trozo de código marcando con colores la sintaxis del lenguaje utilizado podemos especificar después de las comillas el lenguaje al que nos estamos refiriendo:
```bash
```python
# Ejemplo de código en Python
def saludar(nombre):
    return f"Hola, {nombre}!"
    ```
```

Este ejemplo quedaría representado de esta forma:
```python
# Ejemplo de código en Python
def saludar(nombre):
    return f"Hola, {nombre}!"
```
##  Documentar una API con sphinx
### Instalar Autodoc-Typehints
Primero, debemos instalar la dependecia sphinx-autodoc-typehints en nuestro entorno ejecutando el siguiente comando:
```bash
pip install sphinx-autodoc-typehints
```

### Implementar la dependencia dentro de nuestro proyecto
Ahora, debemos implementar la dependencia que acabamos de instalar dentro de nuestro archivo "conf.py", más concretamente dentro del arreglo "extensions":
``` bash
# Lista de extensiones activadas en Sphinx
extensions = [
    'sphinx.ext.autodoc',  # Genera documentación automáticamente desde docstrings
    'sphinx.ext.napoleon',  # Interpreta docstrings en formatos Google y NumPy
    'sphinx.ext.viewcode',  # Agrega enlaces al código fuente desde la documentación
    'sphinx_rtd_theme',  # Tema visual basado en Read the Docs
    'myst_parser',  # Habilita soporte para archivos Markdown
    "sphinx_autodoc_typehints"
]
```

### Comentar de forma correcta el código

Ahora, comentamos de forma correcta el codigo de nuestro proyecto:
```python
def saludar(nombre: str) -> str:
    """
    Saluda a un usuario.

    Args:
        nombre (str): Nombre del usuario.

    Returns:
        str: Mensaje de saludo personalizado.
    """
    return f"Hola, {nombre}!"

```

### Generar el archivo de documentacion

Para generar el archivo de documentacion de nuestro codigo usaremos "sphinx-apidoc":

```bash
sphinx-apidoc -o docs/source/ src/
```
Esto generará archivos `.rst` en la carpeta `docs/source/`